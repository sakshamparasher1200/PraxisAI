{
  "repositoryName": "Praxis AI - An AI Medical Appointment Scheduler",
  "projectName": "Praxis AI 🩺✨",
  "description": "A production-ready, full-stack AI medical scheduling web app that automates patient booking, reduces administrative work, and offers a futuristic user experience. Built with Next.js 14+ and designed for Vercel deployment.",
  "sections": [
    {
      "title": "🎯 Goal",
      "content": "Build a production-ready, full-stack AI medical scheduling web app named Praxis ©. It must automate patient booking, reduce admin work, and offer a futuristic UX. The final output must be a single, runnable Next.js project folder, structured for Vercel deployment."
    },
    {
      "title": "🎨 UX & Design Philosophy",
      "details": {
        "ui": "Futuristic, interactive, and professional 🤖",
        "theme": "Mandatory dark mode 🌃",
        "palette": {
          "darkBlue": "#0a041c",
          "purple": "#8a2be2",
          "cyanAccent": "#00f5ff"
        },
        "layout": "Clean, spacious, and centered content 📐",
        "animations": "Use `framer-motion` for smooth transitions. Implement glassmorphism for nav/modals and glow effects for interactive elements ✨",
        "imagery": "High-quality stock photos of modern clinics/doctors, some as low-opacity backgrounds 🖼️",
        "typography": "'Inter' or 'Poppins' ✍️"
      }
    },
    {
      "title": "⚙️ Setup & Dependencies",
      "steps": [
        {
          "step": "1. Initialize Next.js Project",
          "description": "Create a new Next.js 14+ project with TypeScript and Tailwind CSS.",
          "command": "npx create-next-app@latest praxis-ai --ts --tailwind --eslint"
        },
        {
          "step": "2. Install Dependencies",
          "description": "Navigate into the project directory and install all required packages.",
          "command": "npm install @sendgrid/mail twilio axios xlsx framer-motion clsx tailwind-merge"
        },
        {
          "step": "3. Configure Environment Variables",
          "description": "Create a `.env.local` file by copying `.env.example`. Fill in all the required API keys and secrets.",
          "variables": [
            "SENDGRID_API_KEY",
            "TWILIO_ACCOUNT_SID",
            "TWILIO_AUTH_TOKEN",
            "TWILIO_PHONE_NUMBER",
            "CALENDLY_PAT_TOKEN",
            "POSTGRES_URL",
            "ADMIN_PASSWORD"
          ]
        }
      ]
    },
    {
      "title": "🚀 Core Features",
      "featureList": [
        {
          "name": "📝 Initial Data Collection",
          "description": "A multi-step form to collect Full Name, DOB, Preferred Doctor, and Location."
        },
        {
          "name": "🔍 Patient Lookup",
          "description": "After submission, queries the database by Name/DOB to identify a patient as 'New' or 'Returning'."
        },
        {
          "name": "🧠 Smart Scheduling",
          "description": "Automatically allocates 60-minute slots for new patients and 30-minute slots for returning patients."
        },
        {
          "name": "📅 Calendly Integration",
          "description": "Uses the Calendly API to fetch and display available slots based on the required duration (30/60 min) and books the selected slot."
        },
        {
          "name": "📄 Digital Intake Form",
          "description": "After booking, displays a digital replica of the `New Patient Intake Form.pdf` for completion."
        },
        {
          "name": "📲 Confirmation (Email & SMS)",
          "description": "On form submission, uses the SendGrid API for email confirmation and the Twilio API for SMS confirmation."
        },
        {
          "name": "⏰ Automated Reminders",
          "description": "Implements a 3-step reminder sequence (72h, 48h, 24h) using SendGrid and Twilio, tracking responses in the database."
        },
        {
          "name": "📊 Admin Export",
          "description": "A password-protected `/admin` page with a button to export all upcoming appointments to an `.xlsx` file."
        }
      ]
    },
    {
      "title": "🛠️ Technical Stack",
      "stack": {
        "Framework": "Next.js 14+ (App Router) ▲",
        "Language": "TypeScript 🔷",
        "Styling": "Tailwind CSS 🎨",
        "Database": "Vercel Postgres 🐘",
        "Backend Logic": "Next.js API Routes ↔️"
      }
    },
    {
      "title": "🗂️ Data Model",
      "description": "Synthetic data structure for testing and development.",
      "models": [
        {
          "entity": "Patients",
          "count": 50,
          "fields": ["id", "firstName", "lastName", "dob", "email", "phone"]
        },
        {
          "entity": "Doctors",
          "count": 3,
          "fields": ["id", "name", "specialty", "calendlyLink"]
        }
      ]
    }
  ]
}
